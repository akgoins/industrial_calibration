<?xml version="1.0" ?>
<launch>

  <!-- Camera and depth correction nodelet-->
  <arg name="file" default="camera" />
  <arg name="camera" default="camera" />
 
  <include file="$(find openni2_launch)/launch/openni2.launch" >
    <arg name="publish_tf" value="false" />
    <arg name="camera" value="$(arg camera)" />
    <arg name="depth_registration" default="true" />
    <!-- arg name="device_id" value="3@1"/ -->
    <arg name="rgb_camera_info_url"   value="file://$(find rgbd_depth_correction)/yaml/$(arg file)_rgb.yaml" />
    <arg name="depth_camera_info_url" value="file://$(find rgbd_depth_correction)/yaml/$(arg file)_ir.yaml" />
  </include>

  <node pkg="nodelet" type="nodelet" name="rgbd_depth_correction" args="load rgbd_depth_correction/DepthCorrectionNodelet $(arg camera)/$(arg camera)_nodelet_manager no-bond" output="screen">

    <param name="filename" value="/$(arg file)" />
    <param name="filepath" value="$(find rgbd_depth_correction)/yaml" />
    <remap from="/$(arg camera)/in_cloud" to="/$(arg camera)/depth_registered/points"/>
    <remap from="/$(arg camera)/out_cloud" to="/$(arg camera)/depth/corrected_points" />
  </node>

  <!-- Extrinsic calibration node -->
  <arg name="gui" value="True" />
  <arg name="cal_pkg_name" value="rgbd_depth_correction" />
  <arg name="cal_pkg_path" value="$(find rgbd_depth_correction)" />
  <arg name="urdf_path" value="$(find rgbd_depth_correction)/urdf/camera_scene.urdf" />
  <arg name="camera_ns" value="$(arg camera)" />


  <node pkg="industrial_extrinsic_cal" type="rgb_depth_excal" name="camera_calibration_node" output="screen" >
   <param name="yaml_file_path" value="$(find industrial_extrinsic_cal)/yaml/" />
   <remap from="calibration_service" to="camera1_calibration_service"/>

   <param name="use_circle_detector" value="true" />
   <param name="image_topic" value="/camera/rgb/image_raw" />
   <param name="cloud_topic" value="/camera/depth_registered/points" />
   <param name="camera_name" value="camera" />
   <param name="image_height" value="480" />
   <param name="image_width" value="640" />
   <param name="target_frame" value="camera_rgb_optical_frame" />
   <param name="camera_mounting_frame" value="target_frame" />
   <param name="camera_frame" value="camera_link" />
   <param name="ROI_xmin" value="0" />
   <param name="ROI_ymin" value="0" />
   <param name="ROI_xmax" value="640" />
   <param name="ROI_ymax" value="480" />
   <param name="target_rows" value="18" />
   <param name="target_cols" value="24" />
   <param name="target_circle_dia" value="0.015" />
   <param name="target_spacing" value="0.025" />
  </node>

  <node  name="mutable_joint_state_publisher" pkg="industrial_extrinsic_cal" type="mutable_joint_state_publisher" >
    <param name="mutable_joint_state_yaml_file" value="$(arg cal_pkg_path)/yaml/camera_scene_mutable_joint_states.yaml" />
  </node>

  
  <!-- tf and joint state publishers -->
  <group ns="$(arg camera_ns)" >
    <!-- Load robot description -->
    <param name="robot_description" textfile="$(arg urdf_path)" />

    <!-- Launch robot state/joint state publishers for camera and target -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" >
      <param name="publish_frequency" value="50" />
    </node>
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" >
      <rosparam param="source_list">[/mutable_joint_states]</rosparam>
    </node>

    <!-- Launch Rviz -->
    <group  if="$(arg gui)">
      <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg cal_pkg_path)/config/kinect_calibration.rviz" required ="true"/>
    </group>
  </group>
    <node pkg="tf" type="static_transform_publisher" name="t2_frame" args="0.575 0 0 0 0 0 target_frame t2_frame 100" />
    <node pkg="tf" type="static_transform_publisher" name="t3_frame" args="0 0.425 0 0 0 0 target_frame t3_frame 100" />
    <node pkg="tf" type="static_transform_publisher" name="t4_frame" args="0.575 0.425 0 0 0 0 target_frame t4_frame 100" />

</launch>
